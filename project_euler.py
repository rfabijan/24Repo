# shopping_list = ['bread', 'milk', 'bananas', 'onions']
# print(shopping_list)
# shopping_list[0] = 'oranges'
# print(shopping_list.remove('onions'))
# print(shopping_list)
#
# if 'milk' not in shopping_list:
#     print(1)
# else:
#     print(0)
#
#
# print(shopping_list[2][:3:-1])







'''
1Q:

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''
# sum = 0
# for i in range(1000):
#     if i % 3 == 0 or i % 5 == 0:
#        sum += i
# print(sum)


'''
2Q:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''
previous = 0
middle = 0
current = 1
sum_of_numbers = 0
while True:
    previous = current
    current = current+middle
    middle = previous
    if current<=4000000:
        if current%2 == 0:
            sum_of_numbers += current
    else:
        break
print(sum_of_numbers)


'''
3Q:

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143?
'''
# number = 600851475143
# list = []
# while True:
#     print(list)
#     if number == 1:
#         break
#     elif number%2 == 0:
#         number //= 2
#         list.append(2)
#     else:
#         for i in range(3,number+1):
#             if number%i == 0 and i%2 != 0:
#                 number //= i
#                 list.append(i)
#                 break
# print(max(list))



'''
4Q:

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''
# max = 999
# min = 100
# palindromic = 0
# max_palindromic = 0
# while True:
#     if min == max:
#         break
#     else:
#         for i in range(100, max):
#             current = min*i
#             rev = str(current)
#             rev = rev[::-1]
#             rev = int(rev)
#             if (rev==current):
#                 palindromic=current
#                 if palindromic > max_palindromic:
#                     max_palindromic = palindromic
#         min +=1
# print(max_palindromic)


'''
5Q:

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
Answer: 232792560
'''
# min = 20
# sum = 0
# smallest = False
# while True:
#     if smallest:
#         break
#     else:
#         for i in range(1,21):
#             if min%i == 0:
#                 sum += 1
#                 if sum == 20:
#                     print(min)
#                     smallest = True
#             else:
#                 sum = 0
#                 break
#     min += 1
#
# print(min-1)

'''
6Q:

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''
# sum_of_squares = 0
# square_of_sums = 0
# for i in range(1,101):
#     current = i**2
#     sum_of_squares += current
#     square_of_sums += i
# print((square_of_sums**2)-sum_of_squares)

'''
7Q:

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
'''

#     for j in range(2,i+1):
#         if i%j == 0:
#             break
#         else:
#             if i != previous:
#                 print(i)
#                 previous = i
#                 sum_of_primes += i
#             else:
#                 break
# counter = 2
# ran = 10001
# for i in range(3, 1000000, 2):
#      if counter == 10001:
#          break
#      current = 1
#      while current < i:
#         current += 2
#         if i % current == 0:
#          break
#         if current + 2 == i:
#             counter += 1
#             print(counter)
#         if counter == ran:
#              print(i)
#              break
'''
Q8:

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
'''
#
# product = 1
# max_product = 1
# long_number = "73167176531330624919225119674426574742355349194934"+\
#                "96983520312774506326239578318016984801869478851843"+\
#                "85861560789112949495459501737958331952853208805511"+\
#                "12540698747158523863050715693290963295227443043557"+\
#                "66896648950445244523161731856403098711121722383113"+\
#                "62229893423380308135336276614282806444486645238749"+\
#                "30358907296290491560440772390713810515859307960866"+\
#                "70172427121883998797908792274921901699720888093776"+\
#                "65727333001053367881220235421809751254540594752243"+\
#                "52584907711670556013604839586446706324415722155397"+\
#                "53697817977846174064955149290862569321978468622482"+\
#                "83972241375657056057490261407972968652414535100474"+\
#                "82166370484403199890008895243450658541227588666881"+\
#                "16427171479924442928230863465674813919123162824586"+\
#                "17866458359124566529476545682848912883142607690042"+\
#                "24219022671055626321111109370544217506941658960408"+\
#                "07198403850962455444362981230987879927244284909188"+\
#                "84580156166097919133875499200524063689912560717606"+\
#                "05886116467109405077541002256983155200055935729725"+\
#                "71636269561882670428252483600823257530420752963450"
#
# count = 0
# for digit in range(len(long_number)):
#     for i in long_number[digit:]:
#         if count == 13:
#             if product > max_product:
#                 max_product = product
#             count = 0
#             product = 1
#         i = int(i)
#         product *= i
#         count += 1
# print(max_product)
#
#
# # SECOND APPROACH
# for digit in range(len(long_number)):
#     product = 1
#     for i in long_number[digit:digit+14]:
#         if product > max_product:
#             max_product = product
#         i = int(i)
#         product *= i
# print(max_product)



'''
Q9:

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a**2 + b**2 = c**2

For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
'''
# A=0
# B=0
# C=0
# for a in range(1,1000):
#     if A > 0:
#         break
#     for b in range(1,1000):
#         if B > 0:
#             break
#         for c in range(1,1000):
#             if a+b+c == 1000:
#                 if c**2 == (a ** 2) + (b ** 2):
#                     A = a
#                     B = b
#                     C = c
#                     print(A, B, C)
#                     break
# print(A*B*C)

'''
Q10:

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
'''

# sum_of_primes = 0
# previous = 0
# for i in range(1,2000000+1):
#     for j in range(2,i+1):
#         if i%j == 0:
#             break
#         else:
#             if i != previous:
#                 print(i)
#                 previous = i
#                 sum_of_primes += i
#             else:
#                 break
# print(sum_of_primes)
